@model pagebuilder.Model.Pdf
@{
    ViewBag.Title = "Edit";
    var vi = 0;
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
@RenderPage("../Shared/PanelMenu.cshtml")
@RenderPage("~/Views/Shared/CreatePDF.cshtml")
@RenderPage("~/Views/Shared/CreatePDFList.cshtml")

<div class="panel panel-body page-edit">
    @using (Html.BeginForm("Edit", "Pdf", null, FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-pdf form-pdf-edit" }))
    {
        @Html.AntiForgeryToken()
        <input id="ImgNull" type="hidden" name="imgnull" value="0" /> <!-- value="0"-->
        <input id="menucollapse" type="hidden" name="menucollapse" value="@Request.QueryString["menucollapse"]" />

        <div class="form-horizontal">
            <div class="row form-header">
                <div class="col-sm-6">
                    <h4>Edit Pdf</h4>
                </div>
                <div class="col-sm-6 text-right">
                    <a href="~/Menugroups" class="f-back btn btn-default btn-sm">
                        Back to List
                    </a>
                </div>
            </div>

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row form-group form-image">
                @Html.Label("Image header", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="row">
                        <div class="col-md-8">
                            @if (ViewBag.Img == true)
                            {
                                <div class="fi fi-data-img">
                                    <span class="fdi fdi-remove"><i class="fa fa-times" aria-hidden="true"></i></span>
                                    <img class="fdi fdi-img" src="~/Pdf/RetrieveImage/@Html.DisplayFor(model => model.Id)" alt="" width="250" />
                                </div>
                                <input type="file" id="upload" name="fileImg" style="display:none;" />
                            }
                            else
                            {
                                <input type="file" id="upload" name="fileImg" accept="image/png,image/jpg,image/jpeg" onchange="fileCheck(this)" />
                                <!--  <input type="file" id="uploadImg" name="fileImg" accept="image/png,image/jpg,image/jpeg" onchange="fileCheck(this)" />  -->
                            }
                        </div>
                        <div class="col-md-4" style="display:none">
                            @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.Created, new { htmlAttributes = new { @class = "form-control datepicker" }, type = "date" })
                            @Html.ValidationMessageFor(model => model.Created, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Title" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row form-group" style="display:none">
                @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row form-group" style="display:none">
                @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Created, new { htmlAttributes = new { @class = "form-control datepicker" }, type = "date" })
                    @Html.ValidationMessageFor(model => model.Created, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row form-group">
                @*@Html.Label("Pdf Link", htmlAttributes: new { @class = "control-label col-md-2" })  &nbsp;*@
                @*<a href="~/Pdf/Create" type="button" target="_blank"><i class="fa fa-file-pdf-o"></i> Upload New PDF</a> &nbsp;&nbsp;*@ &nbsp;&nbsp;&nbsp;&nbsp;
                @*<a href="#" type="button" id="addNewPDF" data-toggle="collapse" data-target="#AddNewPDF" aria-expanded="true" aria-controls="AddNewPDF"><i class="fa fa-file-pdf-o"></i> Upload New PDF</a>&nbsp;&nbsp;*@
                @*<a href="~/Pdf" type="button" target="_blank"><i class="fa fa-file-pdf-o"></i> Get Pdf link</a>*@
                @*<a href="#" type="button" id="addNewPDFList" data-toggle="collapse" data-target="#AddNewPDFList" aria-expanded="true" aria-controls="AddNewPDFList"><i class="fa fa-file-pdf-o"></i> Use Existing PDF</a>*@
                <button type="button" id="addNewPDF" class="btn btn-sm btn-primary">
                    <i class="fa fa-file-pdf-o"></i> Upload New PDF
                </button>&nbsp;
                <button type="button" id="addNewPDFList" class="btn btn-sm btn-primary">
                    <i class="fa fa-file-pdf-o"></i>  Use Existing PDF
                </button>
            </div>
            <div class="row form-group">
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ExLink, new { htmlAttributes = new { @class = "form-control", @placeholder = "Link" } })
                    @Html.ValidationMessageFor(model => model.ExLink, "", new { @class = "text-danger" })
                </div>
                <!-- <button onclick="openCustomRoxy2()">Click me</button> -->
            </div>
            <div class="row form-group" style="display:none">
                @Html.Label("Pdf File", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="file" id="txtUploadFile" name="filePdf" accept=".pdf" data-path="@Url.Content("~/Content/PdfFiles/")" />
                </div>
            </div>
            <div class="row form-group">

                @Html.LabelFor(model => model.Publish, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <span class="pub -yes">
                        <span class="pl">Yes</span>
                        @Html.RadioButtonFor(model => model.Publish, "1")
                    </span>
                    <span class="pub -no">
                        <span class="pl">No</span>
                        @Html.RadioButtonFor(model => model.Publish, "0")
                    </span>
                    @Html.ValidationMessageFor(model => model.Publish, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row form-group">
                @Html.LabelFor(model => model.IsExternal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <span class="pub -yes">
                        <span class="pl">Yes</span>
                        @Html.RadioButtonFor(model => model.IsExternal, "1")
                    </span>
                    <span class="pub -no">
                        <span class="pl">No</span>
                        @Html.RadioButtonFor(model => model.IsExternal, "0")
                    </span>
                </div>
            </div>
            <div id="adv-set" class="collapse multi-collapse">
                <div class="row form-group">
                    @Html.LabelFor(model => model.Author, "Author", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row form-group">
                <div class="col-md-2"></div>
                <div class="col-md-offset-2 col-md-10 f-control">
                    <input type="submit" value="Save" class="btn btn-success" />
                </div>
            </div>
        </div>
    }
</div>
